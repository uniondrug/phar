<?php/** * @author wsfuyibing <websearch@163.com> * @date   2018-12-31 */namespace Uniondrug\Phar\Server\Handlers;use Swoole\Http\Request as SwooleRequest;use Swoole\Http\Response as SwooleResponse;use Uniondrug\Framework\Request as PhalconRequest;use Uniondrug\Phar\Server\XHttp;/** * HttpHandler * @package Uniondrug\Phar\Server\Handlers */class HttpHandler{    const REQID_KEY = 'X-Requested-Id';    const REQID_HTTP = 'HTTP_X_REQUESTED_ID';    private $content = '';    private $contentType = 'application/json';    /**     * HTTP请求ID     * @var string     */    private $requestId;    private $requestUri;    private $requestHash;    private $requestBegin;    private $requestAssets = false;    private $requestHealth = false;    private $requestManager = false;    private $requestMemory = 0.0;    /**     * @var XHttp     */    private $server;    /**     * HTTP状态码     * @var int     */    private $statusCode = 200;    /**     * @var SwooleRequest     */    private $swooleRequest;    /**     * @var SwooleResponse     */    private $swooleResponse;    /**     * @var array     */    private $swooleResponseCookies = [];    /**     * @var array     */    private $swooleResponseHeaders = [];    /**     * 收到HTTP请求     * @param XHttp          $server     * @param SwooleRequest  $swooleRequest     * @param SwooleResponse $swooleResponse     */    public function __construct($server, $swooleRequest, $swooleResponse)    {        $this->requestBegin = microtime(true);        $this->requestMemory = (memory_get_usage(false) / 1024) / 1024;        // 1. instance        $this->server = $server;        $this->swooleRequest = $swooleRequest;        $this->swooleResponse = $swooleResponse;        $this->swooleResponseCookies = [];        $this->swooleResponseHeaders = [];        // 2. request id        $reqKey = strtolower(self::REQID_KEY);        $reqName = strtolower(self::REQID_HTTP);        $requestId = isset($swooleRequest->header[$reqKey]) ? $swooleRequest->header[$reqKey] : null;        $requestId || $requestId = isset($swooleRequest->header[$reqName]) ? $swooleRequest->header[$reqName] : null;        $requestId || $requestId = uniqid('req');        $this->requestId = $requestId;        // 3. URL        $this->requestUri = $this->swooleRequest->server['request_uri'];        if (preg_match("/\.([_a-zA-Z0-9\-]+)$/", $this->requestUri, $m) > 0) {            $this->requestAssets = true;            // 4. manager            if ($m[1] === 'health') {                $this->requestHealth = true;            } else if ($m[1] === 'agent') {                $this->requestManager = true;            }        }        // 4. Hash        $this->requestHash = sprintf("[r=%s][m=%s][u=%s]", $this->requestId, $this->swooleRequest->server['request_method'], $this->requestUri);        $this->server->getLogger()->info("%s开始HTTP请求,初始{%.01f}M内存", $this->requestHash, $this->requestMemory);    }    /**     * 析构     */    public function __destruct()    {        $this->server->getLogger()->info("%s[d=%.06f]结束HTTP请求", $this->requestHash, microtime(true) - $this->requestBegin);        $this->swooleRequest = null;        $this->swooleResponse = null;    }    /**     * Swoole Request assign to Phalocn Request     * @param PhalconRequest $phalconRequest     */    public function assignPhalcon(PhalconRequest $phalconRequest)    {        // 1. GPCSF        $_COOKIE = isset($this->swooleRequest->cookie) && is_array($this->swooleRequest->cookie) ? $this->swooleRequest->cookie : [];        $_FILES = isset($this->swooleRequest->files) && is_array($this->swooleRequest->files) ? $this->swooleRequest->files : [];        $_GET = isset($this->swooleRequest->get) && is_array($this->swooleRequest->get) ? $this->swooleRequest->get : [];        $_POST = isset($this->swooleRequest->post) && is_array($this->swooleRequest->post) ? $this->swooleRequest->post : [];        $_SERVER = [];        // 2. S/transfer        $servers = [            self::REQID_KEY => $this->requestId,            self::REQID_HTTP => $this->requestId        ];        if (isset($this->swooleRequest->server) && is_array($this->swooleRequest->server)) {            $servers += $this->swooleRequest->server;        }        if (isset($this->swooleRequest->header) && is_array($this->swooleRequest->header)) {            $servers += $this->swooleRequest->header;        }        foreach ($servers as $key => $value) {            $_SERVER[strtoupper($key)] = $value;        }        // 3. raw body        $phalconRequest->setRawBody($this->swooleRequest->rawContent());    }    /**     * 添加返回Cookie     * @param        $key     * @param        $value     * @param int    $expire     * @param string $path     * @param string $domain     * @param bool   $secure     * @param bool   $httponly     * @return $this     */    public function addResponseCookie($key, $value, $expire = 0, $path = '/', $domain = '', $secure = false, $httponly = false)    {        $this->swooleResponseCookies[] = [            0 => $key,            1 => $value,            2 => $expire,            3 => $path,            4 => $domain,            5 => $secure,            6 => $httponly        ];        return $this;    }    /**     * 读取全部返回Cookie     * @return array     */    public function getResponseCookie()    {        return $this->swooleResponseCookies;    }    /**     * 添加Header头     * @return $this     */    public function addResponseContentType()    {        $this->addResponseHeader('Content-Type', $this->contentType);        return $this;    }    /**     * 添加Header头     * @param string $key     * @param string $value     * @return $this     */    public function addResponseHeader(string $key, string $value)    {        $key = strtolower($key);        $this->swooleResponseHeaders[$key] = $value;        return $this;    }    /**     * 读取全部Headers     * @return array     */    public function getResponseHeader()    {        return $this->swooleResponseHeaders;    }    /**     * 是否为请求静态资源     * @return bool|int     */    public function isAssetsRequest()    {        return $this->requestAssets;    }    /**     * 是否为健康检查连接     * @return bool     */    public function isHealthRequest()    {        return $this->requestHealth;    }    /**     * 是否为Manager连接     * @return bool     */    public function isManagerRequest()    {        return $this->requestManager;    }    /**     * @return array|bool     */    public function getClientInfo()    {        $info = $this->server->getClientInfo($this->swooleRequest->fd);        if (is_array($info)) {            $info['host'] = isset($this->swooleRequest->header['host']) ? $this->swooleRequest->header['host'] : '';        }        return $info;    }    /**     * 读取返回内容     * @return string     */    public function getContent()    {        return $this->content;    }    /**     * 设置返回内容     * @param string $content     * @return $this     */    public function setContent(string $content)    {        $this->content = $content;        return $this;    }    /**     * 读取内容格式     * @return string     */    public function getContentType()    {        return $this->contentType;    }    /**     * 设置内容格式     * @param string $contentType     * @return $this     */    public function setContentType(string $contentType)    {        $this->contentType = $contentType;        return $this;    }    /**     * 读取请求哈希     * @return string     */    public function getRequestHash()    {        return $this->requestHash;    }    /**     * 读取请求ID     * @return string     */    public function getRequestId()    {        return $this->requestId;    }    /**     * 读取HTTP状态码     * @return int     */    public function getStatusCode()    {        return $this->statusCode;    }    /**     * 设置HTTP状态码     * @param int $statusCode     * @return $this     */    public function setStatusCode($statusCode)    {        is_numeric($statusCode) && $statusCode > 0 && $this->statusCode = $statusCode;        return $this;    }    /**     * @return string     */    public function getUri()    {        return $this->requestUri;    }}